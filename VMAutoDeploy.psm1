function New-AutoDeployVM {
    [CmdletBinding()]
    Param(
        # The name of the machine. Will be the VM name and used to register in the DNS.
        [Parameter(Mandatory=$true, Position=0)]
        [string]$Name,

        # Specifies the target Hyper-V Server.
        [Parameter(Mandatory=$true, Position=1)]
        [string]$VMHost,

        # Specifies the number of CPU Cores. Defaults to 1.
        [int]$CPUCount=1,

        # Wether to use dynamic ram or not
        [switch]$DynamicRam,

        # Specifies Startup Memory. 
        [int64]$StartUpRam=1024MB,

        # Specifies the Minimum amount of dynamic.
        [int64]$MinRam=512MB,

        # Specifies the Maximum amount of dynamic.
        [int64]$MaxRam=2048MB,

        [UInt64]$DiskSize=40GB,

        [string]$SwitchName="BackBone",

        [IPAddress]$SubnetAddress,

        [ValidateSet("Nothing", "Start", "StartIfRunning")]
        [string]$AutomaticStartAction = "StartIfRunning",

        [ValidateSet("Save", "ShutDown", "TurnOff")]
        [string]$AutomaticStopAction = "ShutDown",

        [int64]$AutomaticStartDelay=60,

        [string]$ISOPath="E:\ISOs\Debian\Debian-10.6.0.iso",

        # Notes that can be added to the VM.  
        [string]$Notes="AutoGenerated VM"
    )

    # Set up the required directories
    $VMDir = "D:\AutoDeployVMS\$Name"
    Invoke-Command -ComputerName $VMHost -ScriptBlock {
        param($Path)
        New-Item -Path $Path -ItemType Directory | Out-Null
        New-Item -Path "$Path\VM" -ItemType Directory | Out-Null
    } -Args $VMDir

    # Create the virtual hard disk
    New-VHD -ComputerName $VMHost -Path "$FullPath\VHD\$Name.vhdx" -Dynamic -SizeBytes 40GB -ErrorVariable $DiskError | Out-Null

    # Creating the VM with all the required bells and whistles
    New-VM -Name $Name -ComputerName $VMHost `
        -VHDPath "$VMDir\$Name.vhdx" -Path "$VMDir\VM" `
        -MemoryStartupBytes $StartUpRam -SwitchName $SwitchName `
        -Generation 2 -BootDevice "CD" | Out-Null

    Set-VM -Name $Name -ComputerName $VMHost -ProcessorCount $CPUCount `
        -AutomaticStartAction $AutomaticStartAction -AutomaticStopAction $AutomaticStopAction `
        -AutomaticStartDelay $AutomaticStartDelay -Notes $Notes | Out-Null

    if ($DynamicRam) {
        Set-VM -Name $Name -ComputerName $VMHost -DynamicMemory -MemoryMinimumBytes $MinRam -MemoryMaximumBytes $MaxRam | Out-Null
    }
    Set-VMFirmware -VMName $Name -ComputerName $VMHost -EnableSecureBoot $true -SecureBootTemplate "MicrosoftUEFICertificateAuthority"
    Set-VMDvdDrive -VMName $Name -ComputerName $VMHost -Path $ISOPath

    # Hyper-V generates a mac address, lock it and set it to static
    $MacAddress = (Get-VMNetworkAdapter -VMName $Name -ComputerName $VMHost).MacAddress
    Get-VMNetworkAdapter -VMName $Name -ComputerName $VMHost | Set-VMNetworkAdapter -StaticMacAddress $MacAddress

    # Register the IP in DHCP
    $IPAddress = Get-DhcpServerv4FreeIPAddress -ScopeId $SubnetAddress
    Add-DhcpServerv4Reservation -IPAddress $IPAddress -ScopeId $DhcpScope -ClientId $MacAddress `
        -Name $Name -Description "Auto generated lease for VM autodeploy"

    # Register in DNS
    Add-DnsServerResourceRecordA -Name $Name -CreatePtr -AllowUpdateAny -IPv4Address $IPAddress -AgeRecord -ZoneName ServerCademy.local
}
